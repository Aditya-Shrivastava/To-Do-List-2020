[{"D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\index.js":"1","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\App.js":"2","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\reportWebVitals.js":"3","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\StateProvider.js":"4","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\reducer.js":"5","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\Navbar.js":"6","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\Categories.js":"7","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\Home.js":"8","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\SignIn.js":"9","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\Reminder.js":"10","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\AddCategory.js":"11","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\ExistingCategory.js":"12","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\ReminderCard.js":"13","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\ReminderSvg.js":"14","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\HomeSvg.js":"15","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\Firebase.js":"16","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\firebaseConfig.js":"17"},{"size":823,"mtime":1607662853357,"results":"18","hashOfConfig":"19"},{"size":1000,"mtime":1607747155865,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":378,"mtime":1607662737347,"results":"22","hashOfConfig":"19"},{"size":1775,"mtime":1607674733816,"results":"23","hashOfConfig":"19"},{"size":2815,"mtime":1607663098614,"results":"24","hashOfConfig":"19"},{"size":798,"mtime":1607672593461,"results":"25","hashOfConfig":"19"},{"size":271,"mtime":1607740624021,"results":"26","hashOfConfig":"19"},{"size":12610,"mtime":1607769167396,"results":"27","hashOfConfig":"19"},{"size":12588,"mtime":1607742531053,"results":"28","hashOfConfig":"19"},{"size":3482,"mtime":1607662737260,"results":"29","hashOfConfig":"19"},{"size":898,"mtime":1607662737297,"results":"30","hashOfConfig":"19"},{"size":2391,"mtime":1607675008956,"results":"31","hashOfConfig":"19"},{"size":22559,"mtime":1607746652820,"results":"32","hashOfConfig":"19"},{"size":17876,"mtime":1607740602579,"results":"33","hashOfConfig":"19"},{"size":213,"mtime":1607769423659,"results":"34","hashOfConfig":"19"},{"size":391,"mtime":1607768920652,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"ffq5dr",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\index.js",[],["77","78"],"D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\App.js",["79"],"import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport './App.css';\n\nimport Navbar from './components/Navbar';\nimport Home from './components/Home';\nimport Categories from './components/Categories'\nimport Reminder from './components/Reminder';\nimport SignIn from './components/SignIn';\n\nimport {useStateValue} from './components/StateProvider';\n\nfunction App() {\n\n  const [{activeCategory}, dispatch] = useStateValue();\n\n  return (\n    <div className=\"app\">\n      <Switch>\n        <Route exact path='/login'>\n\t\t\t\t\t<SignIn />\n\t\t\t\t</Route>\n        <Route exact path=\"/\">\n          <Navbar title=\"Home\" />\n          <Home />\n        </Route>\n        <Route exact path=\"/categories\">\n          <Navbar title=\"Categories\" />\n          <Categories />\n        </Route>\n        <Route exact path=\"/reminder\">\n          <Navbar title={activeCategory?.length? \"Reminders\": \"Reminders\"} />\n          <Reminder />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\reportWebVitals.js",[],"D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\StateProvider.js",[],"D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\reducer.js",[],"D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\Navbar.js",[],"D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\Categories.js",["80"],"import React from 'react';\r\nimport AddCategory from './AddCategory';\r\nimport './Categories.css';\r\nimport ExistingCategory from './ExistingCategory';\r\n\r\nimport {useStateValue} from './StateProvider';\r\n\r\nfunction Categories() {\r\n\r\n    const [{categories}, dispatch] = useStateValue();\r\n\r\n    // console.log({categories});\r\n\r\n    const categoriesLength = Object.keys(categories).length;\r\n\r\n    // console.log(\"length\", categoriesLength);\r\n\r\n    return (\r\n        <div \r\n            className={`${categoriesLength === 0 && \"single\"} ${categoriesLength !== 0 && \"categories\"}`}\r\n        >\r\n            <AddCategory />\r\n            \r\n            {categories?.map((category) => \r\n                <ExistingCategory name={category} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Categories\r\n","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\Home.js",[],"D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\SignIn.js",[],"D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\Reminder.js",["81","82","83"],"import React, { useEffect, useState } from 'react';\r\nimport './Reminder.css';\r\n\r\nimport {useStateValue} from './StateProvider';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport KeyboardReturnIcon from '@material-ui/icons/KeyboardReturn';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { DialogContent, DialogTitle, TextField, Tooltip } from '@material-ui/core';\r\n\r\nimport ReminderCard from './ReminderCard';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport ReminderSvg from './ReminderSvg';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    textField: {\r\n      marginBottom: '20px',\r\n    //   display: 'grid',\r\n    //   placeItems: 'center'\r\n    },\r\n}));\r\n\r\n\r\nfunction Reminder() {\r\n\r\n    const history = useHistory();\r\n\r\n    const classes = useStyles();\r\n\r\n    const [{activeCategory, reminders, categories, editId, editTitle, editText}, dispatch] = useStateValue();\r\n\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [activeReminders, setActiveReminders] = useState([]);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [time, setTime] = useState(\"\");\r\n    const [error, setError] = useState(false);\r\n\r\n    const filterReminders = () => {\r\n        var items = reminders.filter(function(reminder) {\r\n            return reminder.category === activeCategory;\r\n        })\r\n\r\n        // console.log(items);\r\n\r\n        setActiveReminders(items);\r\n    };\r\n\r\n    useEffect(() => {\r\n        filterReminders();\r\n    }, [reminders]);\r\n\r\n    useEffect(() => {\r\n        setTitle(editTitle);\r\n        setDescription(editText);\r\n    }, [editId])\r\n\r\n    // console.log(activeReminders);\r\n\r\n    // console.log(reminders);\r\n\r\n    const handleDialogOpen = () => {\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleDialogClose = () => {\r\n\r\n        if (editId !== 0) {\r\n            dispatch({\r\n                type: 'EDIT_REMINDER',\r\n                payload: {id: 0, title: \"\", text: \"\"}\r\n            });\r\n        }\r\n\r\n        setDialogOpen(false);\r\n    };\r\n\r\n    // Date format reminder match \r\n    // console.log(new Date().toLocaleString())\r\n\r\n    const handleDateTime = (e) => {\r\n        setError(false); \r\n\r\n        const item = e.target.value;\r\n\r\n        // 2020-12-12T17:08\r\n        // console.log(item.slice(0, 10));\r\n        // console.log(item.slice(11, 16));\r\n\r\n        setDate(item.slice(0, 10));\r\n        setTime(item.slice(11, 16));\r\n    };\r\n\r\n    // console.log(Math.floor(Math.random() * 10000) + Math.floor(Math.random() * 1000));\r\n\r\n    const handleReminderSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Also use this for edit -> delete current card then add a new card\r\n\r\n        var randomId = Math.floor(Math.random() * 10000) + Math.floor(Math.random() * 1000);\r\n\r\n        var tempState = {\r\n            category: activeCategory,\r\n            id: randomId,\r\n            title: title,\r\n            text: description,\r\n            time: time,\r\n            date: date\r\n        }\r\n\r\n        // console.log(\"Add Reminder >>>\", tempState);\r\n\r\n        if ((title.length === 0) || (date.length === 0) || (time.length === 0)) {\r\n            setError(true); \r\n        } else {\r\n\r\n            // EDIT  REMINDER\r\n            // console.log(editId);\r\n\r\n            if (editId !== 0) {\r\n\r\n                var updatedReminders = reminders.filter(function(reminder) {\r\n                    return reminder.id != editId;\r\n                });\r\n\r\n                dispatch({\r\n                    type: 'UPDATE_REMINDERS',\r\n                    payload: updatedReminders\r\n                });\r\n\r\n                dispatch({\r\n                    type: 'EDIT_REMINDER',\r\n                    payload: {id: 0, title: \"\", text: \"\"}\r\n                });\r\n            };\r\n\r\n\r\n            dispatch({\r\n                type: 'ADD_REMINDER',\r\n                payload: tempState\r\n            });\r\n\r\n            setTitle(\"\");\r\n            setDescription(\"\");\r\n            setDate(\"\");\r\n            setTime(\"\");\r\n            setDialogOpen(false);\r\n        }\r\n    };\r\n\r\n    // console.log(\"Dialog Open >>>>\", dialogOpen);\r\n\r\n    const [openDeleteDialog, setOpenDeleteDialog] = useState(false);\r\n\r\n    const handleDeleteCategory = () => {\r\n        var updatedReminders = reminders.filter(function(reminder) {\r\n            return reminder.category !== activeCategory;\r\n        });\r\n\r\n        var updatedCategories = categories.filter(function(category) {\r\n            return category !== activeCategory\r\n        });\r\n\r\n        // console.log(updatedCategories);\r\n        // console.log(updatedReminders);\r\n\r\n        dispatch({\r\n            type: 'UPDATE_REMINDERS',\r\n            payload: updatedReminders\r\n        });\r\n\r\n        dispatch({\r\n            type: 'UPDATE_CATEGORIES',\r\n            payload: updatedCategories\r\n        });\r\n\r\n        dispatch({\r\n            type: 'ACTIVE_CATEGORY',\r\n            payload: \"\"\r\n        });\r\n\r\n        // filterReminders();\r\n        setOpenDeleteDialog(false);\r\n        history.push('/categories');\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"reminder\">\r\n            {\r\n                activeCategory?.length > 0 ? (\r\n                    <div className=\"reminder__container\">\r\n                        <h1>Your Reminders for {activeCategory}</h1>\r\n\r\n                        <div className=\"reminder__add\" onClick={handleDialogOpen}>\r\n                            <AddCircleIcon className=\"reminder__addIcon\"/>\r\n\r\n                            <p className=\"reminder__addText\">Add new reminder</p>\r\n                        </div>\r\n\r\n                        <Dialog open={dialogOpen} onClose={handleDialogClose} aria-labelledby=\"form-dialog-title\">\r\n                            <div className=\"reminder__dialog\">\r\n                                <DialogTitle id=\"form-dialog-title\">Add a Reminder</DialogTitle>\r\n                                <DialogContent>\r\n                                    <form onSubmit={handleReminderSubmit}>\r\n                                        <TextField \r\n                                            error={error? title.length > 0 ? false : true : false}\r\n                                            helperText={error? title.length > 0 ? null : \"please add a title\" : null}\r\n                                            autoFocus\r\n                                            margin=\"dense\"\r\n                                            label=\"Title\"\r\n                                            type=\"text\"\r\n                                            fullWidth\r\n                                            className={classes.textField}\r\n                                            value={title}\r\n                                            onChange={(e) => {\r\n                                                setTitle(e.target.value)\r\n                                                setError(false); \r\n                                            }}\r\n                                        />\r\n\r\n                                        <TextField \r\n                                            autoFocus\r\n                                            margin=\"dense\"\r\n                                            label=\"Description\"\r\n                                            type=\"text\"\r\n                                            fullWidth\r\n                                            className={classes.textField}\r\n                                            value={description}\r\n                                            onChange={(e) => setDescription(e.target.value)}\r\n                                        />\r\n\r\n                                        <TextField\r\n                                            error={error? date.length > 0 ? false : true : false}\r\n                                            helperText={error? date.length > 0 ? null : \"please select date and time\" : null}\r\n                                            id=\"datetime-local\"\r\n                                            label=\"Set Date and Time\"\r\n                                            type=\"datetime-local\"\r\n                                            // defaultValue=\"2017-05-24T10:30\"\r\n                                            className={classes.textField}\r\n                                            InputLabelProps={{\r\n                                                shrink: true,\r\n                                            }}\r\n                                            onChange={handleDateTime}\r\n                                        />\r\n\r\n                                        <div className=\"reminder__dialogButtons\">\r\n                                            <button style={{backgroundColor: \"#fe5f55\", }} type=\"button\" onClick={handleDialogClose}>close</button>\r\n                                            <button style={{backgroundColor: \"#17b978\", }} type=\"submit\" onClick={handleReminderSubmit}>add</button>\r\n                                        </div>\r\n\r\n                                    </form>\r\n                                </DialogContent>\r\n                            </div>\r\n                        </Dialog>\r\n\r\n                        <div className={`${activeReminders?.length === 0 && \"reminder__noCards\"} ${\"reminder__cards\"}`}>\r\n                            {activeReminders?.map((reminder) => (\r\n                                <ReminderCard \r\n                                    id = {reminder.id}\r\n                                    title = {reminder.title}\r\n                                    text = {reminder.text}\r\n                                    time = {reminder.time}\r\n                                    date = {reminder.date}\r\n                                    openDialog={handleDialogOpen}\r\n                                    // pass delete\r\n                                />\r\n                            ))}\r\n                        </div>\r\n\r\n                        \r\n                        <div className=\"reminder__buttons\">\r\n                            <Tooltip title=\"Go To Categories\" placement=\"right-end\">\r\n                                <KeyboardReturnIcon \r\n                                    style={{color: \"#3a3d44\",}} \r\n                                    className=\"reminder__buttons--hover\"\r\n                                    onClick={() => history.push('/categories')} \r\n                                />\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Delete This Category\" placement=\"left-end\">\r\n                                <DeleteIcon \r\n                                    style={{color: \"#3a3d44\", }} \r\n                                    className=\"reminder__buttons--hover\"\r\n                                    onClick={() => setOpenDeleteDialog(true)}\r\n                                />\r\n                            </Tooltip>\r\n\r\n                            <Dialog\r\n                                open={openDeleteDialog}\r\n                                onClose={() => setOpenDeleteDialog(false)}\r\n                                aria-labelledby=\"alert-dialog-title\"\r\n                                aria-describedby=\"alert-dialog-description\"\r\n                            >\r\n                                <div className=\"reminder__dialog\">\r\n                                    <DialogTitle id=\"alert-dialog-title\">{`Delete category ${activeCategory} ?`}</DialogTitle>\r\n\r\n                                    <div style={{justifyContent: \"space-evenly\", }} className=\"reminder__dialogButtons\">\r\n                                        <button style={{backgroundColor: \"#fe5f55\", }} onClick={() => setOpenDeleteDialog(false)}>No</button>\r\n                                        <button \r\n                                            style={{backgroundColor: \"#17b978\", }}\r\n                                            onClick={handleDeleteCategory}\r\n                                        >\r\n                                            Yes\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </Dialog>\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    <>\r\n                    <ReminderSvg />\r\n                    </>\r\n                )\r\n            }\r\n               \r\n\r\n                \r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default Reminder\r\n\r\n\r\n\r\n","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\AddCategory.js",["84"],"import React, { useState } from 'react';\r\nimport './AddCategory.css';\r\n\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nimport {useStateValue} from './StateProvider';\r\n\r\nimport { DialogContent, DialogTitle, TextField } from '@material-ui/core';\r\n\r\nfunction AddCategory() {\r\n\r\n    const [{categories}, dispatch] = useStateValue();\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [errorName, setErrorName] = useState(\"category name cannot be empty\");\r\n    const [newCategory, setNewCategory] = useState(\"\");\r\n\r\n    // console.log(categories);\r\n    // console.log(newCategory);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setError(false);\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        setNewCategory(e.target.value);\r\n        setError(false);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (newCategory.length !== 0){\r\n\r\n            if(categories.includes(newCategory) == false) {\r\n\r\n                dispatch({\r\n                    type: 'CREATE_CATEGORY',\r\n                    payload: newCategory\r\n                })\r\n\r\n                setNewCategory(\"\");\r\n                setOpen(false);\r\n                \r\n            } else {\r\n                setError(true); \r\n                setErrorName(\"category already defined\");\r\n            }\r\n            \r\n        } else {\r\n            setError(true);\r\n            setErrorName(\"category name cannot be empty\")\r\n        }\r\n        \r\n    };\r\n\r\n    return (\r\n        <div className=\"addCategory\">\r\n            <div className=\"addCategory__items\">\r\n                <div className=\"addCategory__itemsIcon\">\r\n                    <AddCircleOutlineIcon onClick={handleOpen} />\r\n                </div>\r\n                \r\n                <p>Add New Category</p>\r\n\r\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                    <div className=\"dialog\">\r\n                        <DialogTitle id=\"form-dialog-title\">Create New Category</DialogTitle>\r\n                        <DialogContent>\r\n                            <form onSubmit={handleSubmit}>\r\n                                <TextField\r\n                                    error={error}\r\n                                    helperText={error? errorName : null}\r\n                                    autoFocus\r\n                                    margin=\"dense\"\r\n                                    label=\"Category Name\"\r\n                                    type=\"text\"\r\n                                    fullWidth\r\n                                    value={newCategory}\r\n                                    onChange={handleChange}\r\n                                />\r\n\r\n                                <div className=\"dialog__buttons\">\r\n                                    <button style={{backgroundColor: \"#fe5f55\", }} type=\"button\" onClick={handleClose}>close</button>\r\n                                    <button style={{backgroundColor: \"#17b978\", }} type=\"submit\" onClick={handleSubmit}>create</button>\r\n                                </div>\r\n                            </form>\r\n                        </DialogContent>\r\n                    </div>\r\n                </Dialog>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddCategory\r\n","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\ExistingCategory.js",["85"],"import React from 'react';\r\nimport './ExistingCategory.css';\r\n\r\nimport CategoryIcon from '@material-ui/icons/Category';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport {useStateValue} from './StateProvider';\r\n\r\nfunction ExistingCategory({name}) {\r\n\r\n    const [{}, dispatch] = useStateValue();\r\n\r\n    const history = useHistory();\r\n    \r\n    const handleClick = () => {\r\n        dispatch({\r\n            type: 'ACTIVE_CATEGORY',\r\n            payload: name\r\n        });\r\n\r\n        history.push('/reminder')\r\n    };\r\n\r\n    return (\r\n        <div className=\"exCategory\" onClick={handleClick}>\r\n            <div className=\"exCategory__items\">\r\n                <div className=\"exCategory__itemsIcon\">\r\n                    <CategoryIcon />\r\n                </div>\r\n                \r\n                <p>{name}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExistingCategory\r\n","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\ReminderCard.js",["86"],"import React from 'react';\r\nimport './ReminderCard.css';\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nimport { Tooltip } from '@material-ui/core';\r\n\r\nimport TextTruncate from \"react-text-truncate\";\r\n\r\nimport {useStateValue} from './StateProvider';\r\n\r\nfunction ReminderCard({id, title, text, time, date, openDialog}) {\r\n\r\n    const [{reminders}, dispatch] = useStateValue();\r\n\r\n    const handleEdit = () => {\r\n        dispatch({\r\n            type: 'EDIT_REMINDER',\r\n            payload: {id: id, title: title, text: text}\r\n        });\r\n\r\n        openDialog();\r\n    };\r\n\r\n    const handleDelete = () => {\r\n        var updatedReminders = reminders.filter(function(reminder) {\r\n            return reminder.id !== id;\r\n        })\r\n\r\n        dispatch({\r\n            type: 'UPDATE_REMINDERS',\r\n            payload: updatedReminders\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card__left\">\r\n                <h1>{title}</h1>\r\n                {/* <TextTruncate \r\n                    line={1}\r\n                    element=\"p\"\r\n                    truncateText=\"  ...\"\r\n                    text={text}\r\n                    textTruncateChild={<a href=\"#\">Read more</a>}\r\n                /> */}\r\n                <p>{text}</p>\r\n            </div>\r\n            \r\n            <div className=\"card__right\">\r\n                <div className=\"card__rightText\">\r\n                    <p>{date}</p>\r\n                    <p>{time}</p>\r\n                </div>\r\n\r\n                <div className=\"card__rightIcons\">\r\n                <Tooltip title=\"Delete Reminder\" placement=\"left-end\">\r\n                    <DeleteIcon \r\n                        style={{color: \"#e53935\", }} \r\n                        className=\"card__rightIcons--hover\"\r\n                        onClick={handleDelete}\r\n                    />\r\n                </Tooltip>\r\n                <Tooltip title=\"Edit Reminder\" placement=\"right-end\">\r\n                    <EditIcon \r\n                        style={{color: \"#0d8549\", }} \r\n                        className=\"card__rightIcons--hover\"\r\n                        onClick={handleEdit}\r\n                    />\r\n                </Tooltip>\r\n                    \r\n                    \r\n                </div>\r\n            </div>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReminderCard\r\n","D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\ReminderSvg.js",[],"D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\components\\HomeSvg.js",[],"D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\Firebase.js",[],"D:\\work\\web_dev\\react_projects\\to-do-list-2020\\src\\firebaseConfig.js",[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":15,"column":28,"nodeType":"93","messageId":"94","endLine":15,"endColumn":36},{"ruleId":"91","severity":1,"message":"92","line":10,"column":26,"nodeType":"93","messageId":"94","endLine":10,"endColumn":34},{"ruleId":"95","severity":1,"message":"96","line":55,"column":8,"nodeType":"97","endLine":55,"endColumn":19,"suggestions":"98"},{"ruleId":"95","severity":1,"message":"99","line":60,"column":8,"nodeType":"97","endLine":60,"endColumn":16,"suggestions":"100"},{"ruleId":"101","severity":1,"message":"102","line":128,"column":40,"nodeType":"103","messageId":"104","endLine":128,"endColumn":42},{"ruleId":"101","severity":1,"message":"105","line":42,"column":49,"nodeType":"103","messageId":"104","endLine":42,"endColumn":51},{"ruleId":"106","severity":1,"message":"107","line":11,"column":12,"nodeType":"108","messageId":"104","endLine":11,"endColumn":14},{"ruleId":"91","severity":1,"message":"109","line":9,"column":8,"nodeType":"93","messageId":"94","endLine":9,"endColumn":20},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filterReminders'. Either include it or remove the dependency array.","ArrayExpression",["112"],"React Hook useEffect has missing dependencies: 'editText' and 'editTitle'. Either include them or remove the dependency array.",["113"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'TextTruncate' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},"Update the dependencies array to be: [filterReminders, reminders]",{"range":"118","text":"119"},"Update the dependencies array to be: [editId, editText, editTitle]",{"range":"120","text":"121"},[1686,1697],"[filterReminders, reminders]",[1798,1806],"[editId, editText, editTitle]"]